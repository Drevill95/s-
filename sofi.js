// BOT BY CONFU_MODS
// :v SI LO PIENSAS EDITAR ALMENOS DEBES DARME PARTE DE EL CR√âDITO CTM
const qrcode = require("qrcode-terminal")
const moment = require("moment-timezone")
const speed = require('performance-now')
const request = require('request');
const { spawn, exec, execSync } = require("child_process")
const fs = require("fs")
const axios = require("axios")
const ffmpeg = require('fluent-ffmpeg')
const fetch = require('node-fetch');	
const yts = require( 'yt-search')
const ms = require('parse-ms')
const toMs = require('ms')
const { error } = require("qrcode-terminal")
const util = require('util')
const { getBuffer, wait, h2k, generateMessageID, getGroupAdmins, getRandom, banner, start, info, success, close } = require('./lib/functions')
const { color, bgcolor } = require('./lib/color')
const { fetchJson, getBase64, kyun, createExif } = require('./lib/fetcher')
const { yta, ytv, igdl, upload } = require('./lib/ytdl')
const { webp2mp4File} = require('./lib/webp2mp4')





const imgbb = require('imgbb-uploader')


const phoneNum = require('awesome-phonenumber')
const imageToBase64 = require('image-to-base64')
const lolis = require('lolis.life')
const loli = new lolis()

//********** FUNCTIONS **********//
const { removeBackgroundFromImageFile } = require('remove.bg')

const { recognize } = require('./lib/ocr')

const { uploadimg } = require('./lib/uploadimg')


const sleep = async (ms) => {
    return new Promise(resolve => setTimeout(resolve, ms));
}




const time = moment().tz('Asia/Jakarta').format("HH:mm:ss")

const _leveling = JSON.parse(fs.readFileSync('./database/leveling.json'))
const _level = JSON.parse(fs.readFileSync('./database/level.json'))
const afk = JSON.parse(fs.readFileSync('./database/off.json'))
const ban = JSON.parse(fs.readFileSync('./database/banned.json'))
const welkom = JSON.parse(fs.readFileSync('./database/welkom.json'))
const antilink = JSON.parse(fs.readFileSync('./database/antilink.json'))
const nsfw = JSON.parse(fs.readFileSync('./database/nsfw.json'))
const image = JSON.parse(fs.readFileSync('./database/img.json'))
const setting = JSON.parse(fs.readFileSync('./database/setting.json'))

const { help } = require('./src/help')
const { nsfwmenu } = require('./src/nsfwmenu')
const { addMetadata } = require('./lib/exif.js')
const Exif = require('./exif.js')
const exif = new Exif()
const vcard = 'BEGIN:VCARD\n' 
            + 'VERSION:3.0\n' 
            + 'FN:ConfuMods\n' 
            + 'ORG:Creador De Sofi Bot\n' 
            + 'TEL;type=CELL;type=VOICE;waid=50254371795:+502 5437 1795\n' 
            + 'END:VCARD'






const
	{
		WAConnection,
		MessageType,
		Presence,
		MessageOptions,
		Mimetype,
		WALocationMessage,
		WA_MESSAGE_STUB_TYPES,
		WA_DEFAULT_EPHEMERAL,
		ReconnectMode,
		ProxyAgent,
		GroupSettingChange,
		ChatModification,
		waChatKey,
		mentionedJid,
		processTime,
	} = require("@adiwajshing/baileys")
//=================================================//
prefix = '#'
blocked = []
cmdnf = []
ind = []
banChats = false
promote = setting.promote
numbernye = '0'
demote = setting.demote
leave = setting.leave
//=================================================//
async function starts() {
	const SofiBot = new WAConnection()
	SofiBot.version = [2, 2119, 6]
	SofiBot.logger.level = 'warn'
	console.log(banner.string)
	console.log(color('[ BOT]','aqua'), color("BOT BY ConfuMods", "yellow"))
	console.log('>', '[',color('INFO','blue'),']','Suscribete al Canal -_-')
	SofiBot.on('qr', () => {
	console.log(color('[','white'), color('!','red'), color(']','white'), color(' Escanea El C√≥digo QR De Arriba xd'))
	})

	fs.existsSync('./session.json') && SofiBot.loadAuthInfo('./session.json')
	SofiBot.on('connecting', () => {
	console.log(color('> [ INFO ]', 'white'), color('Conectando...'))
	})
	SofiBot.on('open', () => {
	console.log(color('> [ INFO ]', 'white'), color('Listo :D'))
	})
		await SofiBot.connect({timeoutMs: 30*1000})
  fs.writeFileSync('./session.json', JSON.stringify(SofiBot.base64EncodedAuthInfo(), null, '\t'))
//Banned Call
SofiBot.on('CB:action,,call', async json => {
    const callerId = json[2][0][1].from;
    console.log("call dari "+ callerId)
        SofiBot.sendMessage(callerId, "No esta permitido llamar al bot asi que seras autom√°ticamente bloqueado :)", MessageType.text)
        await sleep(4000)
        await SofiBot.blockUser(callerId, "add")
})


SofiBot.on('group-participants-update', async (anu) => {
		if (!welkom.includes(anu.jid)) return
		try {
			const mdata = await SofiBot.groupMetadata(anu.jid)
			console.log(anu)
			if (anu.action == 'add') {
				num = anu.participants[0]
				try {
					ppimg = await SofiBot.getProfilePicture(`${anu.participants[0].split('@')[0]}@c.us`)
				} catch {
					ppimg = 'https://i0.wp.com/www.gambarunik.id/wp-content/uploads/2019/06/Top-Gambar-Foto-Profil-Kosong-Lucu-Tergokil-.jpg'
				}
				teks  = `@${num.split('@')[0]}
ùêíùêà ùêÑùêëùêÑùêí ùêçùêîùêÑùêïùêé ùêèùêëùêÑùêíùêÑùêçùêìùêÄùêìùêÑ ùêé ùêÅùêÄùêç üßÉ

ùêçùêéùêåùêÅùêëùêÑ : 

ùêÖùêéùêìùêé : 

ùêÑùêÉùêÄùêÉ : 

ùêèùêÄùêàùêí : 

ùêÅùêàùêÑùêçùêïùêÑùêçùêàùêÉùêé ùêÄ ùêÑùêíùêìùêÑ ùêÜùêëùêîùêèùêé ùêÜùêîùêÄùêèùêó üç≠`
				let buff = await getBuffer(ppimg)
				SofiBot.sendMessage(mdata.id, buff, MessageType.image, {caption: teks, contextInfo: {"mentionedJid": [num]}})
			}
		} catch (e) {
			console.log('Error : %s', color(e, 'red'))
		}
})
	//Actualizaci√≥n De Chat.
SofiBot.on('chat-update', async (mek) => {
	try {
        if (!mek.hasNewMessage) return
        mek = mek.messages.all()[0]
		if (!mek.message) return
		if (mek.key && mek.key.remoteJid == 'status@broadcast') return
		global.blocked
		mek.message = (Object.keys(mek.message)[0] === 'ephemeralMessage') ? mek.message.ephemeralMessage.message : mek.message
        const content = JSON.stringify(mek.message)
		const from = mek.key.remoteJid
		const { text, extendedText, contact, location, liveLocation, image, video, sticker, document, audio, product } = MessageType
		const time = moment.tz('Asia/Jakarta').format('DD/MM HH:mm:ss')
        const type = Object.keys(mek.message)[0]
        body = (type === 'conversation' && mek.message.conversation.startsWith(prefix)) ? mek.message.conversation : (type == 'imageMessage') && mek.message.imageMessage.caption.startsWith(prefix) ? mek.message.imageMessage.caption : (type == 'videoMessage') && mek.message.videoMessage.caption.startsWith(prefix) ? mek.message.videoMessage.caption : (type == 'extendedTextMessage') && mek.message.extendedTextMessage.text.startsWith(prefix) ? mek.message.extendedTextMessage.text : ''
        var pes = (type === 'conversation' && mek.message.conversation) ? mek.message.conversation : (type == 'imageMessage') && mek.message.imageMessage.caption ? mek.message.imageMessage.caption : (type == 'videoMessage') && mek.message.videoMessage.caption ? mek.message.videoMessage.caption : (type == 'extendedTextMessage') && mek.message.extendedTextMessage.text ? mek.message.extendedTextMessage.text : ''
		budy = (type === 'conversation') ? mek.message.conversation : (type === 'extendedTextMessage') ? mek.message.extendedTextMessage.text : ''
		const command = body.slice(0).trim().split(/ +/).shift().toLowerCase()
        const arg = budy.slice(command.length + 1, budy.length)
		const args = body.trim().split(/ +/).slice(1)
		const isCmd = body.startsWith(prefix)
		const q = args.join(' ')
		const meNumber = SofiBot.user.jid.split("@")[0]
		const botNumber = SofiBot.user.jid
//SETTING
		const isGroup = from.endsWith('@g.us')
		const sender = isGroup ? mek.participant : mek.key.remoteJid
		const senderme = mek.participant
		const isMe = botNumber.includes(senderme)
		const isBanned = ban.includes(sender)
        const isNsfw = isGroup ? nsfw.includes(from) : false
        const isImage = isGroup ? nsfw.includes(from) : false
		const totalchat = await SofiBot.chats.all()
		const groupMetadata = isGroup ? await SofiBot.groupMetadata(from) : ''
		const groupName = isGroup ? groupMetadata.subject : ''
		const groupId = isGroup ? groupMetadata.jid : ''
		const groupMembers = isGroup ? groupMetadata.participants : ''
		const groupDesc = isGroup ? groupMetadata.desc : ''
		const messagesC = pes.slice(0).trim().split(/ +/).shift().toLowerCase()
		const groupOwner = isGroup ? groupMetadata.owner : ''
		const groupAdmins = isGroup ? getGroupAdmins(groupMembers) : ''
		const isBotGroupAdmins = groupAdmins.includes(botNumber) || false
		const isGroupAdmins = groupAdmins.includes(sender) || false
        const isWelkom = isGroup ? welkom.includes(from) : false		
        const isAntiLink = isGroup ? antilink.includes(from) : false
        const conts = mek.key.fromMe ? SofiBot.user.jid : SofiBot.contacts[sender] || { notify: jid.replace(/@.+/, '') }
        const pushname = mek.key.fromMe ? SofiBot.user.name : conts.notify || conts.vname || conts.name || '-'
       //SETTINGS FUNCIONES
       const apakah = ['Si','No']
   	const gay = ['Eres 15% Gay','Eres 0% Gay üò±','Eres 20% Gay','Eres 78% Gay','Eres 62% Gay','Eres 0.1% Gay','Eres 100% Gay üò¨','Eres 6% Gay','Eres 96% Gay','Eres 21% Gay','Eres 50% Gay','Eres 99.99% Gay','Eres 12% Gay','Eres 88% Gay','ERES INFINITAMENTE GAY ü§Ø','Eres 75% Gay','Eres 19% Gay','Eres Fan De Bts ü§¨','Eres 44% Gay','Eres 84% Gay']
       const kapankah = ['Otro d√≠a','Otra semana','Otro mes','Otro a√±o']
        //MESS
        
		mess = {
			wait: 'Soy lenta, espera (‚ï•Ôπè‚ï•)',
			success: 'Listo',
			nsfwoff: 'La Funcion De Nsfw No Est√° Activa',
			wrongFormat: 'Escribe Bien porfavor :c',
			waitmusic: 'Espera, Estoy buscando tu musica 7w7',
			waitimg: 'Soy lenta, espera (‚ï•Ôπè‚ï•)',
			nsfwoff: 'La Funcion De Nsfw No Est√° Activa :c',
					musica: 'Espera un momento, estoy buscando tu musica 7u7',
			imageoff: 'No tengo permitido enviar fotos (‚ï•Ôπè‚ï•) sorry',
			error: {
				stick: 'Pude :c',
				errostick: 'Error al crear tu sticker :c',
				Iv: 'Tu link ya no sirve :c al parecer'
			},
			only: {
				group: 'Este Comando Solo Puede Ser Usado En Grupos',
				admin: 'No Eres Admin (‚ï•Ôπè‚ï•)',
				Badmin: 'Necesito Ser Admin Primero :3'
			}
		}
		const isUrl = (url) => {
        return url.match(new RegExp(/https?:\/\/(www\.)?[-a-zA-Z0-9@:%.+~#=]{1,256}\.[a-zA-Z0-9()]{1,6}\b([-a-zA-Z0-9()@:%+.~#?&/=]*)/, 'gi'))
        }

        const reply = (teks) => {
            SofiBot.sendMessage(from, teks, text, {quoted:mek})
        }

        const sendMess = (hehe, teks) => {
            SofiBot.sendMessage(hehe, teks, text, {sendEphemeral: true})
        }

        const mentions = (teks, memberr, id) => {
            (id == null || id == undefined || id == false) ? SofiBot.sendMessage(from, teks.trim(), extendedText, { contextInfo: { "mentionedJid": memberr } }) : SofiBot.sendMessage(from, teks.trim(), extendedText, { quoted: mek, contextInfo: { "mentionedJid": memberr } })
        }
        const costum = (pesan, tipe, target, target2) => {
                 SofiBot.sendMessage(from, pesan, tipe, {quoted: {key: {fromMe: false, participant: `${target}`, ...(from ? {remoteJid: from}: {})}, message: {conversation: `${target2}` }}})
        }
        
const fakekontak = (teks) => {
SofiBot.sendMessage(from, teks, MessageType.text, {
quoted: {
key: {
fromMe: false,
 participant: `0@s.whatsapp.net`, ...(from ? { remoteJid: `0@s.whatsapp.net` } : {})
 },
message: {
 'contactMessage': {
 'displayName': `Hola ${pushname}`,
'vcard': `BEGIN:VCARD\nVERSION:3.0\nN:XL;${ucapanWaktu},;;;\nFN:${ucapanWaktu},\nitem1.TEL;waid=${sender.split('@')[0]}:${sender.split('@')[0]}\nitem1.X-ABLabel:Ponsel\nEND:VCARD`,
 'jpegThumbnail': fs.readFileSync('./stik/thumb.jpeg')
}
}
                }
            })
        }


			

        const fakethumb = (teks, yes) => {
            SofiBot.sendMessage(from, teks, image, {thumbnail:fs.readFileSync('./stik/fake.jpeg'),quoted:mek,caption:yes})
        }
        const fakestatus = (teks) => {
            SofiBot.sendMessage(from, teks, text, {
                quoted: {
                    key: {
                        fromMe: false,
                        participant: `0@s.whatsapp.net`, ...(from ? { remoteJid: "status@broadcast" } : {})
                    },
                    message: {
                        "imageMessage": {
                            "url": "https://mmg.whatsapp.net/d/f/At0x7ZdIvuicfjlf9oWS6A3AR9XPh0P-hZIVPLsI70nM.enc",
                            "mimetype": "image/jpeg",
                            "caption": `Hola ${pushname}`,
                            "fileSha256": "+Ia+Dwib70Y1CWRMAP9QLJKjIJt54fKycOfB2OEZbTU=",
                            "fileLength": "28777",
                            "height": 1080,
                            "width": 1079,
                            "mediaKey": "vXmRR7ZUeDWjXy5iQk17TrowBzuwRya0errAFnXxbGc=",
                            "fileEncSha256": "sR9D2RS5JSifw49HeBADguI23fWDz1aZu4faWG/CyRY=",
                            "directPath": "/v/t62.7118-24/21427642_840952686474581_572788076332761430_n.enc?oh=3f57c1ba2fcab95f2c0bb475d72720ba&oe=602F3D69",
                            "mediaKeyTimestamp": "1610993486",
                            "jpegThumbnail": fs.readFileSync('./stik/thumb.jpeg'),
                            "scansSidecar": "1W0XhfaAcDwc7xh1R8lca6Qg/1bB4naFCSngM2LKO2NoP5RI7K+zLw=="
                        }
                    },
                    contextInfo: {
                      "forwardingScore": 999, "isForwarded": true
                    }
                }
            })
        }
        const fakegroup = (teks) => {
            SofiBot.sendMessage(from, teks, text, {
                quoted: {
                    key: {
                        fromMe: false,
                        participant: `0@s.whatsapp.net`, ...(from ? { remoteJid : `50254371795@g.us` } : {})
                    },
                    message: {
                        "imageMessage": {
                            "url": "https://mmg.whatsapp.net/d/f/At0x7ZdIvuicfjlf9oWS6A3AR9XPh0P-hZIVPLsI70nM.enc",
                            "mimetype": "image/jpeg",
                            "caption": `Hola ${pushname}`,
                            "fileSha256": "+Ia+Dwib70Y1CWRMAP9QLJKjIJt54fKycOfB2OEZbTU=",
                            "fileLength": "28777",
                            "height": 1080,
                            "width": 1079,
                            "mediaKey": "vXmRR7ZUeDWjXy5iQk17TrowBzuwRya0errAFnXxbGc=",
                            "fileEncSha256": "sR9D2RS5JSifw49HeBADguI23fWDz1aZu4faWG/CyRY=",
                            "directPath": "/v/t62.7118-24/21427642_840952686474581_572788076332761430_n.enc?oh=3f57c1ba2fcab95f2c0bb475d72720ba&oe=602F3D69",
                            "mediaKeyTimestamp": "1610993486",
                            "jpegThumbnail": fs.readFileSync('./stik/thumb.jpeg'),
                            "scansSidecar": "1W0XhfaAcDwc7xh1R8lca6Qg/1bB4naFCSngM2LKO2NoP5RI7K+zLw=="
                        }
                    }
                }
            })
        }
 const faketoko = (teks) => {
 SofiBot.sendMessage(from, teks, text, {
quoted: {
 key: {
fromMe: false,
participant: `0@s.whatsapp.net`, ...(from ? { remoteJid: 'status@broadcast' } : {}) 
}, message: {
'productMessage': {
'product': {
 'productImage':{
'mimetype': 'image/jpeg',
 'jpegThumbnail': fs.readFileSync('./stik/thumb.jpeg')
},
'title': `Holi ( Àò ¬≥Àò)‚ô• ${pushname}`,
'productImageCount': 9999
},
'businessOwnerJid': `0@s.whatsapp.net`
}
}
                }
            })
        }
        const producto = (teks) => {
 SofiBot.sendMessage(from, teks, text, {
quoted: {
 key: {
fromMe: false,
participant: `0@s.whatsapp.net`, ...(from ? { remoteJid: 'status@broadcast' } : {}) 
}, message: {
'productMessage': {
'product': {
 'productImage':{
'mimetype': 'image/jpeg',
 'jpegThumbnail': fs.readFileSync('./stik/thumb.jpeg')
},
'title': `ùêíùêéùêÖùêà‚Ä¢ùêÅùêéùêì`,
'productImageCount': 0
},
'businessOwnerJid': `0@s.whatsapp.net`
}
}
                }
            })
        }
const faketokoforwaded = (teks) => {
	anu = {
	  key: {
			fromMe: false,
			participant: `0@s.whatsapp.net`, ...(from ? { remoteJid: "status@broadcast" } : {})
		},
		message: {
			"productMessage": {
				"product": {
					"productImage":{
						"mimetype": "image/jpeg",
						"jpegThumbnail": fs.readFileSync(`./stik/thumb.jpeg`)
					},
					"title": `Holi ( Àò ¬≥Àò)‚ô• ${pushname}, ${ucapanWaktu}`,
					"retailerId": "Sofi Bot",
					"productImageCount": 1
				},
				"businessOwnerJid": `0@s.whatsapp.net`
		}
	}
}
	SofiBot.sendMessage(from, teks, text, {
	  quoted: anu,
	  contextInfo:{
	    "forwardingScore": 999, "isForwarded": true
	  }
	})
}
        const sendStickerFromUrl = async(to, url) => {
                var names = Date.now() / 10000;
                var download = function (uri, filename, callback) {
                    request.head(uri, function (err, res, body) {
                        request(uri).pipe(fs.createWriteStream(filename)).on('close', callback);
                    });
                };
                download(url, './stik' + names + '.png', async function () {
                    console.log('selesai');
                    let filess = './stik' + names + '.png'
                    let asw = './stik' + names + '.webp'
                    exec(`ffmpeg -i ${filess} -vcodec libwebp -filter:v fps=fps=20 -lossless 1 -loop 0 -preset default -an -vsync 0 -s 512:512 ${asw}`, (err) => {
                        let media = fs.readFileSync(asw)
                        SofiBot.sendMessage(to, media, MessageType.sticker,{quoted:mek})
                        fs.unlinkSync(filess)
                        fs.unlinkSync(asw)
                    });
                });
            }
        const sendMediaURL = async(to, url, text="", mids=[]) =>{
                if(mids.length > 0){
                    text = normalizeMention(to, text, mids)
                }
                const fn = Date.now() / 10000;
                const filename = fn.toString()
                let mime = ""
                var download = function (uri, filename, callback) {
                    request.head(uri, function (err, res, body) {
                        mime = res.headers['content-type']
                        request(uri).pipe(fs.createWriteStream(filename)).on('close', callback);
                    });
                };
                download(url, filename, async function () {
                    console.log('done');
                    let media = fs.readFileSync(filename)
                    let type = mime.split("/")[0]+"Message"
                    if(mime === "image/gif"){
                        type = MessageType.video
                        mime = Mimetype.gif
                    }
                    if(mime.split("/")[0] === "audio"){
                        mime = Mimetype.mp4Audio
                    }
                    SofiBot.sendMessage(to, media, type, { quoted: mek, mimetype: mime, caption: text,contextInfo: {"mentionedJid": mids}})
                    
                    fs.unlinkSync(filename)
                });
            }   

        const hour_now = moment().format('HH')
        var ucapanWaktu = 'Buenos Dias :D'
        if (hour_now >= '02' && hour_now <= '10') {
        reply(`hol`)
          ucapanWaktu = 'Buenos Dias XD'
        } else if (hour_now >= '10' && hour_now <= '14') {
          ucapanWaktu = 'Buenas Tardes :0'
        } else if (hour_now >= '14' && hour_now <= '17') {
          ucapanWaktu = 'Buenas Tardes :v'
        } else if (hour_now >= '17' && hour_now <= '18') {
          ucapanWaktu = 'Buenas Tardes :U'
        } else if (hour_now >= '18' && hour_now <= '23') {
          ucapanWaktu = 'Buenas Noches 7u7'
        } else {
          ucapanWaktu = 'Buenas Noches 7w7'
        }

		colors = ['blue']
		const isMedia = (type === 'imageMessage' || type === 'videoMessage')
		const isQuotedImage = type === 'extendedTextMessage' && content.includes('imageMessage')
		const isQuotedVideo = type === 'extendedTextMessage' && content.includes('videoMessage')
		const isQuotedAudio = type === 'extendedTextMessage' && content.includes('audioMessage')
		const isQuotedSticker = type === 'extendedTextMessage' && content.includes('stickerMessage')
		const isQuotedDocument = type === 'extendedTextMessage' && content.includes('documentMessage')
		if (isCmd && isBanned) {
        return console.log(color('[ USU√ÅRIO BANEADO ] Ignorando', 'blue'), color(moment.tz('America/Per√∫').format('HH:mm:ss'), 'yellow'), color(`${command}`),'DE:', color(pushname))}
    	if (!isGroup && isCmd) console.log('\x1b[1;37m>', '[ \x1b[1;36mMensaje\x1b[1;37m ]', time, color(command), 'De', color(sender.split('@')[0]))
        if (isCmd && isGroup) console.log('\x1b[1;37m>', '[ \x1b[1;36mMensaje\x1b[1;37m ]', time, color(command), 'De', color(sender.split('@')[0]), 'En', color(groupName))

			switch(command) {
				case prefix+ 'menu':
  case prefix+ 'help':
  wew = fs.readFileSync('./src/foto.png')
					SofiBot.sendMessage(from, wew, image, {quoted: { key: { fromMe: false, participant: `0@s.whatsapp.net`, ...(from ? { remoteJid: "status@broadcast" } : {}) }, message: { "imageMessage": { "url": "https://mmg.whatsapp.net/d/f/At0x7ZdIvuicfjlf9oWS6A3AR9XPh0P-hZIVPLsI70nM.enc", "mimetype": "image/jpeg", "caption": "ùêíùêéùêÖùêà‚Ä¢ùêÅùêéùêì", "fileSha256": "+Ia+Dwib70Y1CWRMAP9QLJKjIJt54fKycOfB2OEZbTU=", "fileLength": "28777", "height": 1080, "width": 1079, "mediaKey": "vXmRR7ZUeDWjXy5iQk17TrowBzuwRya0errAFnXxbGc=", "fileEncSha256": "sR9D2RS5JSifw49HeBADguI23fWDz1aZu4faWG/CyRY=", "directPath": "/v/t62.7118-24/21427642_840952686474581_572788076332761430_n.enc?oh=3f57c1ba2fcab95f2c0bb475d72720ba&oe=602F3D69", "mediaKeyTimestamp": "1610993486", "jpegThumbnail": fs.readFileSync('./src/botlogo.webp')} } }, caption: help(prefix) })
				  break
case prefix+ 'nsfwmenu':
if (!isNsfw) return reply(mess.nsfwoff)
SofiBot.sendMessage(from, nsfwmenu(prefix, sender), text, {quoted: mek})
break




case prefix+ 'tts':
case prefix+ 'gtts':
case 'tts':
if (args.length < 1) return SofiBot.sendMessage(from, `Debes usar el comando correctamente:\n${prefix}tts es (texto)\nEjemplo: ${prefix}tts es Deberia subscribirme al canal de confu`, text, {quoted: mek})
const gtts = require('./lib/gtts')(args[0])
if (args.length < 2) return SofiBot.sendMessage(from, 'Y El Texto?', text, {quoted: mek})
dtt = body.slice(8)
ranm = getRandom('.mp3')
dtt.length > 800
? reply('Ni que fueras a narrar tu historia en Vietnam ;-;')
: gtts.save(ranm, dtt, function() {
SofiBot.sendMessage(from, fs.readFileSync(ranm), audio, {quoted: mek, mimetype: 'audio/mp4', ptt:true})
fs.unlinkSync(ranm)
})
break


case prefix+ 'hidetag':
			if (!mek.key.fromMe) return fakestatus('SOFI-BOT')
			if (!isGroup) return reply(mess.only.group)
			var value = args.join(' ')
			var group = await SofiBot.groupMetadata(from)
			var member = group['participants']
			var mem = []
			member.map(async adm => {
			mem.push(adm.id.replace('c.us', 's.whatsapp.net'))
			})
			var optionshidetag = {
			text: value,
			contextInfo: { mentionedJid: mem },
			quoted: mek
			}
			SofiBot.sendMessage(from, optionshidetag, text)
			break
    case prefix+ 'sticktag':
            if ((isMedia && !mek.message.videoMessage || isQuotedSticker) && args.length == 0) {
            encmedia = isQuotedSticker ? JSON.parse(JSON.stringify(mek).replace('quotedM', 'm')).message.extendedTextMessage.contextInfo : mek
            file = await SofiBot.downloadAndSaveMediaMessage(encmedia, filename = getRandom())
            value = args.join(" ")
            var group = await SofiBot.groupMetadata(from)
            var member = group['participants']
            var mem = []
            member.map(async adm => {
            mem.push(adm.id.replace('c.us', 's.whatsapp.net'))
            })
            var options = {
                contextInfo: { mentionedJid: mem },
                quoted: mek
            }
            ini_buffer = fs.readFileSync(file)
            SofiBot.sendMessage(from, ini_buffer, MessageType.sticker, options)
            fs.unlinkSync(file)
            } else {
            reply(`*Etiqueta un sticker*`)
            }
            break
		    case prefix+ 'giftag':
                if (!isQuotedVideo) return reply(`Uso: ${prefix + command}`)
                quoted = JSON.parse(JSON.stringify(mek).replace('quotedM', 'm')).message.extendedTextMessage.contextInfo
                download = await SofiBot.downloadMediaMessage(quoted)
                await fs.writeFileSync(`giftag.gif`, download)
                var group = await SofiBot.groupMetadata(from)
                var member = group['participants']
                var mem = []
                member.map(async adm => {
                mem.push(adm.id.replace('c.us', 's.whatsapp.net'))
                })
                thumb = fs.readFileSync(`giftag.gif`)
                SofiBot.sendMessage(from, thumb, video, { contextInfo: {mentionedJid: mem }, quoted: mek, mimetype: 'video/gif', thumbnail: thumb })
			    await fs.unlinkSync(`giftag.gif`)
			    break
			case prefix+ 'doctag':
			  //by Dehanjing
		        if (!isQuotedDocument) return amek.reply(from, `Etiqueta un archivo y escribe lo siguiente : ${prefix}doctag*`, mek)
                quoted = JSON.parse(JSON.stringify(mek).replace('quotedM', 'm')).message.extendedTextMessage.contextInfo
                download = await SofiBot.downloadMediaMessage(quoted)
                await fs.writeFileSync(`doc.txt`, download)
                var group = await SofiBot.groupMetadata(from)
                var member = group['participants']
                var mem = []
                member.map(async adm => {
                mem.push(adm.id.replace('c.us', 's.whatsapp.net'))
                })
                SofiBot.sendMessage(from, fs.readFileSync(`doc.txt`), document, { contextInfo: {mentionedJid: mem }, quoted: mek, mimetype: 'text/plain' })
			    await fs.unlinkSync(`doc.txt`)
			    break
    case prefix+ 'contag':
            if (!mek.key.fromMe) return reply('SOFI-BOT')
            pe = args.join('')
            entah = pe.split('|')[0]
            nah = pe.split('|')[1]
            if (isNaN(entah)) return reply('Numero de telefono invalido (‚ï•Ôπè‚ï•)');
            members_ids = []
            for (let mem of groupMembers) {
            members_ids.push(mem.jid)
            }
            vcard = 'BEGIN:VCARD\n'
            + 'VERSION:3.0\n'
            + `FN:${nah}\n`
            + `TEL;type=CELL;type=VOICE;waid=${entah}:${phoneNum('+' + entah).getNumber('internasional')}\n`
            + 'END:VCARD'.trim()
            SofiBot.sendMessage(from, {displayName: `${nah}`, vcard: vcard}, contact, {contextInfo: {"mentionedJid": members_ids}})
            break
    case prefix+ 'totag':
            if ((isMedia && !mek.message.videoMessage || isQuotedSticker) && args.length == 0) {
            encmedia = isQuotedSticker ? JSON.parse(JSON.stringify(mek).replace('quotedM', 'm')).message.extendedTextMessage.contextInfo : mek
            file = await SofiBot.downloadAndSaveMediaMessage(encmedia, filename = getRandom())
            value = args.join(" ")
            var group = await SofiBot.groupMetadata(from)
            var member = group['participants']
            var mem = []
            member.map(async adm => {
            mem.push(adm.id.replace('c.us', 's.whatsapp.net'))
            })
            var options = {
                contextInfo: { mentionedJid: mem },
                quoted: mek
            }
            ini_buffer = fs.readFileSync(file)
            SofiBot.sendMessage(from, ini_buffer, MessageType.sticker, options)
            fs.unlinkSync(file)
            } else if ((isMedia && !mek.message.videoMessage || isQuotedImage) && args.length == 0) {
            encmedia = isQuotedImage ? JSON.parse(JSON.stringify(mek).replace('quotedM', 'm')).message.extendedTextMessage.contextInfo : mek
            file = await SofiBot.downloadAndSaveMediaMessage(encmedia, filename = getRandom())
            value = args.join(" ")
            var group = await SofiBot.groupMetadata(from)
            var member = group['participants']
            var mem = []
            member.map(async adm => {
            mem.push(adm.id.replace('c.us', 's.whatsapp.net'))
            })
            var options = {
                contextInfo: { mentionedJid: mem },
                quoted: mek
            }
            ini_buffer = fs.readFileSync(file)
            SofiBot.sendMessage(from, ini_buffer, image, options)
            fs.unlinkSync(file)
        } else if ((isMedia && !mek.message.videoMessage || isQuotedAudio) && args.length == 0) {
            encmedia = isQuotedAudio ? JSON.parse(JSON.stringify(mek).replace('quotedM', 'm')).message.extendedTextMessage.contextInfo : mek
            file = await SofiBot.downloadAndSaveMediaMessage(encmedia, filename = getRandom())
            value = args.join(" ")
            var group = await SofiBot.groupMetadata(from)
            var member = group['participants']
            var mem = []
            member.map(async adm => {
            mem.push(adm.id.replace('c.us', 's.whatsapp.net'))
            })
            var options = {
            	mimetype : 'audio/mp4',
            	ptt : true,
                contextInfo: { mentionedJid: mem },
                quoted: mek
            }
            ini_buffer = fs.readFileSync(file)
            SofiBot.sendMessage(from, ini_buffer, audio, options)
            fs.unlinkSync(file)
        }  else if ((isMedia && !mek.message.videoMessage || isQuotedVideo) && args.length == 0) {
            encmedia = isQuotedVideo ? JSON.parse(JSON.stringify(mek).replace('quotedM', 'm')).message.extendedTextMessage.contextInfo : mek
            file = await SofiBot.downloadAndSaveMediaMessage(encmedia, filename = getRandom())
            value = args.join(" ")
            var group = await SofiBot.groupMetadata(from)
            var member = group['participants']
            var mem = []
            member.map(async adm => {
            mem.push(adm.id.replace('c.us', 's.whatsapp.net'))
            })
            var options = {
            	mimetype : 'video/mp4',
                contextInfo: { mentionedJid: mem },
                quoted: mek
            }
            ini_buffer = fs.readFileSync(file)
            SofiBot.sendMessage(from, ini_buffer, video, options)
            fs.unlinkSync(file)
        } else{
          reply(`Etiqueta un sticker/audio/video con : ${prefix}totag`)
        }
        break

case prefix+ 'closegc':
case prefix+ 'closegp':
case prefix+ 'cerrargp':
case prefix+ 'cerrar':
case prefix+ 'cierra':
SofiBot.updatePresence(from, Presence.composing)
if (!isGroup) return reply(mess.only.group)
					if (!isGroupAdmins) return reply(mess.only.admin)
					if (!isBotGroupAdmins) return reply(mess.only.Badmin)
var nomor = mek.participant
const close = {
text: `Grupo Cerrado Por: @${nomor.split("@s.whatsapp.net")[0]}`,
contextInfo: {
mentionedJid: [nomor]
}
}
SofiBot.groupSettingChange (from, GroupSettingChange.messageSend, true);
reply(close)
break
case prefix+ 'opengc':
case prefix+ 'opengp':
case prefix+ 'abrirgp':
case prefix+ 'abrir':
case prefix+ 'abre':
SofiBot.updatePresence(from, Presence.composing)
if (!isGroup) return reply(mess.only.group)
					if (!isGroupAdmins) return reply(mess.only.admin)
					if (!isBotGroupAdmins) return reply(mess.only.Badmin)
var nomor = mek.participant
const open = {
text: `Grupo Abierto Por: @${nomor.split("@s.whatsapp.net")[0]}`,
contextInfo: {
mentionedJid: [nomor]
}
}
SofiBot.groupSettingChange (from, GroupSettingChange.messageSend, false);
reply(open)
break
case prefix+ 'kick':
case prefix+ 'eliminar':
case prefix+ 'ban':
if (!isGroup) return reply(mess.only.group)
					if (!isGroupAdmins) return reply(mess.only.admin)
					if (!isBotGroupAdmins) return reply(`Este Comando Solo Se Puede Usar Cuando Soy Admin („Éªo„Éª)`)
					if (mek.message.extendedTextMessage === undefined || mek.message.extendedTextMessage === null) return reply('Etiqueta a quien quieras eliminar („Éª‚Äì„Éª;)„Çû')
					mentioned = mek.message.extendedTextMessage.contextInfo.mentionedJid
					if (mentioned.length > 1) {
					teks = ''
					for (let _ of mentioned) {
					teks += `Byee...(‚îõ‚ùç·¥•‚ùç)‚îõÂΩ°‚îª‚îÅ‚îª :\n`
					teks += `@_.split('@')[0]`
					}
					mentions(teks, mentioned, true)
					SofiBot.groupRemove(from, mentioned)
					} else {
					mentions(`Byee...(‚îõ‚ùç·¥•‚ùç)‚îõÂΩ°‚îª‚îÅ‚îª @${mentioned[0].split('@')[0]}`, mentioned, true)
					SofiBot.groupRemove(from, mentioned)
					}					
					break 
					
					case prefix+ 'antilink':
if (!isGroup) return reply(mess.only.group)	 
					if (!isGroupAdmins) return reply(mess.only.admin)
					if (!isBotGroupAdmins) return reply(mess.only.Badmin)
					if (args.length < 1) return reply('Hmmmm')
					if (Number(args[0]) === 1) {
						if (isAntiLink) return reply('Ya estaba activo (‚óç‚Ä¢·¥ó‚Ä¢‚óç)')
						antilink.push(from)
						fs.writeFileSync('./database/antilink.json', JSON.stringify(antilink))
						reply('Se activo con exito(‚óç‚Ä¢·¥ó‚Ä¢‚óç)Ô∏è')
					} else if (Number(args[0]) === 0) {
						antilink.splice(from, 1)
						fs.writeFileSync('./database/antilink.json', JSON.stringify(antilink))
						reply('Se desactivo con √©xito la funci√≥n de bienvenida en este grupo („Éªo„Éª)Ô∏è')
					} else {
						reply('1 para activar, 0 para desactivar')
					}
                    break
					case prefix+ 'promote':
                 case prefix+ 'dar':
                 case prefix+ 'pm':
					SofiBot.updatePresence(from, Presence.composing) 
					if (!isGroup) return reply(mess.only.group)
					if (!isGroupAdmins) return reply(mess.only.admin)
					if (!isBotGroupAdmins) return reply(mess.only.Badmin)
					if (mek.message.extendedTextMessage === undefined || mek.message.extendedTextMessage === null) return reply('Etiqueta a quien quieras dar admin UwU')
					mentioned = mek.message.extendedTextMessage.contextInfo.mentionedJid
					if (mentioned.length > 1) {
						teks = 'Pedido recibido‚úÖ\n\nAgregando cargo como administrador (‚óç‚Ä¢·¥ó‚Ä¢‚óç) :\n'
						for (let _ of mentioned) {
							teks += `@${_.split('@')[0]}\n`
						}
						mentions(teks, mentioned, true)
						SofiBot.groupMakeAdmin(from, mentioned)
					} else {
						mentions(`Pedido recibido‚úÖ\n\nAgregando cargo como administrador a : @${mentioned[0].split('@')[0]} (‚óç‚Ä¢·¥ó‚Ä¢‚óç)`, mentioned, true)
						SofiBot.groupMakeAdmin(from, mentioned)
					}
					break
					case prefix+ 'linkgroup':
					if (!isGroup) return reply(mess.only.group)
				    if (!isBotGroupAdmins) return reply(`Este Comando Solo Se Puede Usar Cuando Soy Admin („Éªo„Éª)`)
				    linkgc = await SofiBot.groupInviteCode (from)
				    yeh = `https://chat.whatsapp.com/${linkgc}\n\nLink Del Grupo *${groupName} (·óí·ó©·óï)*`
				    SofiBot.sendMessage(from, yeh, text, {quoted: mek1})			       
					break
case prefix+ 'leave':
case prefix+ 'salir':
                    if (!isGroup) return reply(mess.only.group)
                    if (!isGroupAdmins) return reply(mess.only.admin)
                     setTimeout( () => {
					SofiBot.groupLeave (from) 
					}, 2000)
                     setTimeout( () => {
					SofiBot.updatePresence(from, Presence.composing) 
					SofiBot.sendMessage(from, 'Me voy ya no me quieren (‚ï•Ôπè‚ï•)', text) 
					}, 0)
                     break
       case prefix+ 'ownergrup':
       case prefix+ 'due√±ogp':
               SofiBot.updatePresence(from, Presence.composing) 
              options = {
          text: `El Creador De Este Grupo Es :@${from.split("-")[0]} ÔΩ°.Ôæü+ ‚üµ(ÔΩ°ÔΩ•œâÔΩ•)`, 
          contextInfo: { mentionedJid: [from] }
           }
           SofiBot.sendMessage(from, options, text, { quoted: mek } )
				break




case prefix+ 'tagall':
case prefix+ 'todos':
case prefix+ 'marcar':
case prefix+ 'etiquetar':
if (!isGroupAdmins) return reply(mess.only.admin)
					if (!isGroup) return reply(mess.only.group)
					var nom = mek.participant
					members_id = []
					teks = '\n'
					for (let mem of groupMembers) {
						teks += `‚îú‚ïº @${mem.jid.split('@')[0]}\n`
						members_id.push(mem.jid)
					}
					mentions(`*‚ñ¢ Grupo:*  ${groupName}\n*‚ñ¢ Miembros:* ${groupMembers.length} \n*‚ñ¢ Total De Admins:* ${groupAdmins.length}\n‚îå‚îÄ‚îÄ‚îÄ‚ä∑ *MENCIONES* ‚ä∂`+teks+'‚îî‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚ú™ ùêíùê®ùêüùê¢ ‚îÉ ·¥Æ·¥º·µÄ ‚ú™‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ* ', members_id, true)
					break
case prefix+ 'tagall2':
                case prefix+ 'marcar2':
				SofiBot.updatePresence(from, Presence.composing) 
					if (!isGroup) return reply(mess.only.group)
					if (!isGroupAdmins) return reply(mess.only.admin)
					members_id = []
					teks = (args.length > 1) ? body.slice(8).trim() : ''
					teks += `  Total : ${groupMembers.length}\n`
					for (let mem of groupMembers) {
						teks += `‚ô° ${mem.jid.split('@')[0]}\n`
						members_id.push(mem.jid)
					}
					SofiBot.sendMessage(from, 'Mencionando a todos OwO'+teks+'‚ú™ ùêíùê®ùêüùê¢ ‚îÉ ·¥Æ·¥º·µÄ ‚ú™', text, {quoted: mek})
					break
                case prefix+ 'tagall3':
                case prefix+ 'marcar3':
				SofiBot.updatePresence(from, Presence.composing) 
					if (!isGroup) return reply(mess.only.group)
					if (!isGroupAdmins) return reply(mess.only.admin)
					members_id = []
					teks = (args.length > 1) ? body.slice(8).trim() : ''
					teks += `  Total : ${groupMembers.length}\n`
					for (let mem of groupMembers) {
						teks += `https://wa.me/${mem.jid.split('@')[0]}\n`
						members_id.push(mem.jid)
					}
					SofiBot.sendMessage(from, 'ùöÉùôæùô≥ùôæùöÇ'+teks, text, {detectLinks: false, quoted: mek})
					break
                        case prefix+ 'tagall4':
                        case prefix+ 'marcar4':
				SofiBot.updatePresence(from, Presence.composing) 
					if (!isGroup) return reply(mess.only.group)
					if (!isGroupAdmins) return reply(mess.only.admin)
					members_id = []
					teks = (args.length > 1) ? body.slice(8).trim() : ''
					teks += `  Total : ${groupMembers.length}\n`
					for (let mem of groupMembers) {
						teks += `‚úø ${mem.jid.split('@')[0]}@c.us\n`
						members_id.push(mem.jid)
					}
					SofiBot.sendMessage(from, 'ùôèùô§ùôôùô§ùô®'+teks+'‚úîÔ∏é', text, {quoted: mek})
					break
                case prefix+ 'tagall5':
                case prefix+ 'marcar5':
				SofiBot.updatePresence(from, Presence.composing) 
					if (!isGroup) return reply(mess.only.group)
					if (!isGroupAdmins) return reply(mess.only.admin)
					members_id = []
					teks = (args.length > 1) ? body.slice(8).trim() : ''
					teks += `Total : ${groupMembers.length}\n`
					for (let mem of groupMembers) {
						teks += ` ${mem.jid.split('@')[0]}@s.whatsapp.net\n`
						members_id.push(mem.jid)
					}
					reply('ùëªùë∂ùë´ùë∂ùë∫'+teks+'')
					break




case prefix+ 'welcome':
case prefix+ 'bienvenida':
case prefix+ 'biemvenida':
					if (!isGroup) return reply(mess.only.group)
					if (!isGroupAdmins) return reply(mess.only.admin)
					if (args.length < 1) return reply(`1 para activar`)
					if (Number(args[0]) === 1) {
						if (isWelkom) return reply('Ya esta activada!!!')
						welkom.push(from)
						fs.writeFileSync('./database/welkom.json', JSON.stringify(welkom))
						reply('La funcion de bienvenida esta habilitada en este grupo (‚óç‚Ä¢·¥ó‚Ä¢‚óç)')
					} else if (Number(args[0]) === 0) {
						welkom.splice(from, 1)
						fs.writeFileSync('./database/welkom.json', JSON.stringify(welkom))
						reply('La funcion de bienvenida esta deshabilitada en este grupo (‚ï•Ôπè‚ï•)')
					} else {
						reply('1 para activarlo y 0 para desactivarlo')
					}
					break
case prefix+ 'nsfw':
					if (!isGroup) return reply(mess.only.group)
					if (!isGroupAdmins) return reply(mess.only.admin)
					if (args.length < 1) return reply('1 para activar')
					if (Number(args[0]) === 1) {
						if (isNsfw) return reply('Recursos Activados ‚äôÔπè‚äô')
						nsfw.push(from)
						fs.writeFileSync('./database/nsfw.json', JSON.stringify(nsfw))
						reply('La funcion NSFW esta habilitado en este grupo ‚äôÔπè‚äô')
					} else if (Number(args[0]) === 0) {
						nsfw.splice(from, 1)
						fs.writeFileSync('./database/nsfw.json', JSON.stringify(nsfw))
						reply('La funcion NSFW esta deshabilitado en este grupo (‚óç‚Ä¢·¥ó‚Ä¢‚óç)')
					} else {
						reply('1 para activar, 0 para desactivar')
					}
					break	
					

case prefix+ 'tovid':
    case prefix+ 'tovideo':
            if ((isMedia && !mek.message.videoMessage || isQuotedSticker) && args.length == 0) {
            ger = isQuotedSticker ? JSON.parse(JSON.stringify(mek).replace('quotedM', 'm')).message.extendedTextMessage.contextInfo : mek
            owgi = await SofiBot.downloadAndSaveMediaMessage(ger)
            webp2mp4File(owgi).then(res=>{
            sendMediaURL(from,res.result,'Listo')
            })
            }else {
            reply('Etiqueta un sticker ÔΩ°.Ôæü+ ‚üµ(ÔΩ°ÔΩ•œâÔΩ•)')
            }
            fs.unlinkSync(owgi)
            break
    case prefix+ 'tomp3':
            if (!isQuotedVideo) return fakegroup('Etiqueta un video (‚óç‚Ä¢·¥ó‚Ä¢‚óç)')
            fakegroup(mess.wait)
            encmedia = JSON.parse(JSON.stringify(mek).replace('quotedM', 'm')).message.extendedTextMessage.contextInfo
            media = await SofiBot.downloadAndSaveMediaMessage(encmedia)
            ran = getRandom('.mp4')
            exec(`ffmpeg -i ${media} ${ran}`, (err) => {
            fs.unlinkSync(media)
            if (err) return fakegroup(`Err: ${err}`)
            buffer453 = fs.readFileSync(ran)
            SofiBot.sendMessage(from, buffer453, audio, { mimetype: 'audio/mp4', quoted: mek })
            fs.unlinkSync(ran)
            })
            break
    case prefix+ 'toimg':
			if (!isQuotedSticker) return reply('Etiqueta un sticker ÔΩ°.Ôæü+ ‚üµ(ÔΩ°ÔΩ•œâÔΩ•)')
			reply(mess.wait)
			encmedia = JSON.parse(JSON.stringify(mek).replace('quotedM','m')).message.extendedTextMessage.contextInfo
			media = await SofiBot.downloadAndSaveMediaMessage(encmedia)
			ran = getRandom('.png')
			exec(`ffmpeg -i ${media} ${ran}`, (err) => {
			fs.unlinkSync(media)
			if (err) return reply('int√©ntalo de nuevo (‚ï•Ôπè‚ï•)')
			buffer = fs.readFileSync(ran)
			fakethumb(buffer,'ùêíùêéùêÖùêà‚Ä¢ùêÅùêéùêì')
			fs.unlinkSync(ran)
			})
			break
case prefix+ 'tourl':
var imgbb = require('imgbb-uploader')
if ((isMedia && !mek.message.videoMessage || isQuotedImage) && args.length == 0) {
ger = isQuotedImage ? JSON.parse(JSON.stringify(mek).replace('quotedM','m')).message.extendedTextMessage.contextInfo : mek
reply('Soy lenta, espera (‚ï•Ôπè‚ï•)')
owgi = await SofiBot.downloadAndSaveMediaMessage(ger)
anu = await imgbb("0c419be2e8bfc27eff00147b0c763418", owgi)
imurl = `${anu.display_url}`
reply(imurl)
}
break






case prefix+ 'pussy':
if (!isNsfw) return reply(mess.nsfwoff)
      ranp = getRandom('.gif')
      rano = getRandom('.webp')
			anu = await axios.get('https://nekos.life/api/v2/img/pussy')
			exec(`wget ${anu.data.url} -O ${ranp} && ffmpeg -i ${ranp} -vcodec libwebp -filter:v fps=fps=15 -lossless 1 -loop 0 -preset default -an -vsync 0 -s 512:512 ${rano}`, (err) => {
			  fs.unlinkSync(ranp)
				if (err) return reply('error')
				buffer = fs.readFileSync(rano)
				SofiBot.sendMessage(from, buffer, MessageType.sticker, {quoted: mek})
				fs.unlinkSync(rano)
			})
			break
case prefix+ 'pussyimage':
if (!isNsfw) return reply(mess.nsfwoff)
  pusiimg = await axios.get('https://nekos.life/api/v2/img/pussy_jpg')
			bufpusy = await getBuffer(pusiimg.data.url)
				SofiBot.sendMessage(from, bufpusy, MessageType.image, {quoted: mek})
			.catch(err => {
			return('E-error ‚äôÔπè‚äô')
			})
			break
case prefix+ 'solog':
      ranp = getRandom('.gif')
      rano = getRandom('.webp')
			anu = await axios.get('https://nekos.life/api/v2/img/solog')
			exec(`wget ${anu.data.url} -O ${ranp} && ffmpeg -i ${ranp} -vcodec libwebp -filter:v fps=fps=15 -lossless 1 -loop 0 -preset default -an -vsync 0 -s 512:512 ${rano}`, (err) => {
			  fs.unlinkSync(ranp)
				if (err) return reply('error')
				buffer = fs.readFileSync(rano)
				SofiBot.sendMessage(from, buffer, MessageType.sticker, {quoted: mek})
				fs.unlinkSync(rano)
			})
			break
case prefix+ 'yuri':
if (!isNsfw) return reply(mess.nsfwoff)
			yuriz = await axios.get('https://nekos.life/api/v2/img/tits')
			bupyuri = await getBuffer(yuriz.data.url)
			SofiBot.sendMessage(from, bupyuri, image, { quoted: mek })
			.catch(err => {
			return('E-error ‚äôÔπè‚äô')
			})
			break
	case prefix+ 'anal':
	if (!isNsfw) return reply(mess.nsfwoff)
      ranp = getRandom('.gif')
      rano = getRandom('.webp')
			anu = await axios.get('https://nekos.life/api/v2/img/anal')
			exec(`wget ${anu.data.url} -O ${ranp} && ffmpeg -i ${ranp} -vcodec libwebp -filter:v fps=fps=15 -lossless 1 -loop 0 -preset default -an -vsync 0 -s 512:512 ${rano}`, (err) => {
			  fs.unlinkSync(ranp)
				if (err) return reply('E-error ‚äôÔπè‚äô')
				buffer = fs.readFileSync(rano)
				SofiBot.sendMessage(from, buffer, MessageType.sticker, {quoted: mek})
				fs.unlinkSync(rano)
			})
			break		
case prefix+ 'pwankg':
if (!isNsfw) return reply(mess.nsfwoff)
      ranp = getRandom('.gif')
      rano = getRandom('.webp')
			anu = await axios.get('https://nekos.life/api/v2/img/pwankg')
			exec(`wget ${anu.data.url} -O ${ranp} && ffmpeg -i ${ranp} -vcodec libwebp -filter:v fps=fps=15 -lossless 1 -loop 0 -preset default -an -vsync 0 -s 512:512 ${rano}`, (err) => {
			  fs.unlinkSync(ranp)
				if (err) return reply('E-error ‚äôÔπè‚äô')
				buffer = fs.readFileSync(rano)
				SofiBot.sendMessage(from, buffer, MessageType.sticker, {quoted: mek})
				fs.unlinkSync(rano)
			})
			break
case prefix+ 'eron':
if (!isNsfw) return reply(mess.nsfwoff)
			eronz = await axios.get('https://nekos.life/api/v2/img/eron')
			buferon = await getBuffer(eronz.data.url)
			SofiBot.sendMessage(from, buferon, image, { quoted: mek })
			.catch(err => {
			return('E-error ‚äôÔπè‚äô')
			})
			break

case prefix+ 'ero':
if (!isNsfw) return reply(mess.nsfwoff)
			eroz = await axios.get('https://nekos.life/api/v2/img/ero')
			bufero = await getBuffer(eroz.data.url)
			SofiBot.sendMessage(from, bufero, image, { quoted: mek })
			.catch(err => {
			return('E-error vuelve a intentar ‚äôÔπè‚äô')
			})
			break
case prefix+ 'erok':
if (!isNsfw) return reply(mess.nsfwoff)
			eroz = await axios.get('https://nekos.life/api/v2/img/erok')
			bufero = await getBuffer(eroz.data.url)
			SofiBot.sendMessage(from, bufero, image, { quoted: mek })
			.catch(err => {
			return('E-error vuelve a intentar ‚äôÔπè‚äô')
			})
			break

	case prefix+ 'hentai':
	if (!isNsfw) return reply(mess.nsfwoff)
			hentaiz = await axios.get('https://nekos.life/api/v2/img/hentai')
			bufhtz = await getBuffer(hentaiz.data.url)
			SofiBot.sendMessage(from, bufhtz, image, {quoted: mek})
			.catch(err => {
			return('E-error ‚äôÔπè‚äô')
			})
			break
	
	
	
	
	
  						  	case prefix+ 'stickerwm':
						  	case prefix+ 'stikerwm':
						  	case prefix+ 'sticker':
						  	case prefix+ 's':
						  	case prefix+ 'stiker':
						  	case prefix+ 'stike':
						  	case prefix+ 'sticke':
						  	case prefix+ 'stikewm':
						  	case prefix+ 'stikr':
						  	case prefix+ 'stker':						  
				if (isMedia && !mek.message.videoMessage || isQuotedImage) {
					const encmedia = isQuotedImage ? JSON.parse(JSON.stringify(mek).replace('quotedM', 'm')).message.extendedTextMessage.contextInfo : mek
const media = await SofiBot.downloadAndSaveMediaMessage(encmedia, `./trash/${sender}`)
					const packname1 = (`Confu`)
					const author1 = (`Mods`)
					exif.create(packname1, author1, `confu_${sender}`)
					await ffmpeg(`${media}`)
							.input(media)
							.on('start', function (cmd) {
								console.log(`Started : ${cmd}`)
							})
							.on('error', function (err) {
								console.log(`Error : ${err}`)
								fs.unlinkSync(media)
								reply('*Error (‚ï•Ôπè‚ï•)*')
							})
							.on('end', function () {
								console.log('Listo')
								exec(`webpmux -set exif ./trash/confu_${sender}.exif ./trash/${sender}.webp -o ./trash/${sender}.webp`, async (error) => {
									if (error) return reply('*error (‚ï•Ôπè‚ï•)*')
									SofiBot.sendMessage(from, fs.readFileSync(`./trash/${sender}.webp`), sticker)
									fs.unlinkSync(media)	
									fs.unlinkSync(`./trash/${sender}.webp`)	
									fs.unlinkSync(`./trash/confu_${sender}.exif`)
								})
							})
							.addOutputOptions([`-vcodec`,`libwebp`,`-vf`,`scale='min(320,iw)':min'(320,ih)':force_original_aspect_ratio=decrease,fps=15, pad=320:320:-1:-1:color=white@0.0, split [a][b]; [a] palettegen=reserve_transparent=on:transparency_color=ffffff [p]; [b][p] paletteuse`])
							.toFormat('webp')
							.save(`./trash/${sender}.webp`)
				} else if ((isMedia && mek.message.videoMessage.fileLength < 10000000 || isQuotedVideo && mek.message.extendedTextMessage.contextInfo.quotedMessage.videoMessage.fileLength < 10000000)) {
										const encmedia = isQuotedVideo ? JSON.parse(JSON.stringify(mek).replace('quotedM', 'm')).message.extendedTextMessage.contextInfo : mek
					const media = await SofiBot.downloadAndSaveMediaMessage(encmedia, `./trash/${sender}`)
					const packname1 = (`Confu`)
					const author1 = (`Mods`)
					exif.create(packname1, author1, `confu_${sender}`)
					reply(mess.wait)
						await ffmpeg(`${media}`)
							.inputFormat(media.split('.')[4])
							.on('start', function (cmd) {
								console.log(`Started : ${cmd}`)
							})
							.on('error', function (err) {
								console.log(`Error : ${err}`)
								fs.unlinkSync(media)
								tipe = media.endsWith('.mp4') ? 'video' : 'gif'
								reply('*Ocurio un error ‚äôÔπè‚äô*')
							})
							.on('end', function () {
								console.log('Finish')
								exec(`webpmux -set exif ./trash/confu_${sender}.exif ./trash/${sender}.webp -o ./trash/${sender}.webp`, async (error) => {
									if (error) return reply('error (‚ï•Ôπè‚ï•)')
									SofiBot.sendMessage(from, fs.readFileSync(`./trash/${sender}.webp`), sticker)									
									fs.unlinkSync(media)
									fs.unlinkSync(`./trash/${sender}.webp`)
									fs.unlinkSync(`./trash/confu_${sender}.exif`)
								})
							})
							.addOutputOptions([`-vcodec`,`libwebp`,`-vf`,`scale='min(320,iw)':min'(320,ih)':force_original_aspect_ratio=decrease,fps=15, pad=320:320:-1:-1:color=white@0.0, split [a][b]; [a] palettegen=reserve_transparent=on:transparency_color=ffffff [p]; [b][p] paletteuse`])
							.toFormat('webp')
							.save(`./trash/${sender}.webp`)
			} else {
			reply(`Envia una foto o un video con subtitulo ${prefix}sticker\n\n O bien puedes etiquetar una imagen o video que ya alla sido enviado\n\nNota: Si es un video la duraci√≥n m√°xima tiene que ser de 10 segundosÔΩ°.Ôæü+ ‚üµ(ÔΩ°ÔΩ•œâÔΩ•)`)
			}
		    break 
		             	          										
					case prefix+ 'toimg':
					if (!isQuotedSticker) return reply('Responde a un sticker')
					encmedia = JSON.parse(JSON.stringify(mek).replace('quotedM','m')).message.extendedTextMessage.contextInfo
					media = await SofiBot.downloadAndSaveMediaMessage(encmedia)
					ran= getRandom('.png')
					exec(`ffmpeg -i ${media} ${ran}`, (err) => {
						fs.unlinkSync(media)
						if (err) return reply(' Error al convertir la pegatina en imagen ')
						buffer = fs.readFileSync(ran)
						SofiBot.sendMessage(from, buffer, image, {quoted: freply, caption: fake})
						fs.unlinkSync(ran)
					})
					
					break 
  


case prefix+ 'attp':
						if (args.length < 1) return reply(`Y El Texto??\n> *Ejemplo* : *${prefix}attp* ConfuMods`)
						 var itsme = `0@s.whatsapp.net`
			   	 var split = `Texto De Colores (‚óç‚Ä¢·¥ó‚Ä¢‚óç)`
		     	   var selepbot =         {
					contextInfo:   { participant: itsme, quotedMessage: { extendedTextMessage: { text: split,	}}}}
attp2 = await getBuffer(`https://api.xteam.xyz/attp?file&text=${body.slice(6)}`)
SofiBot.sendMessage(from, attp2, MessageType.sticker, selepbot, {quoted: mek })
						break

//BAN Y UNBAN
/*case prefix+ 'ban':
if (!isGroup) return reply(mess.only.group)
if (!mek.key.fromMe) return fakestatus('„Äå ‚ùó „ÄçESTE COMANDO SOLO PUEDE SER USADO POR MI')
if (mek.message.extendedTextMessage === undefined || mek.message.extendedTextMessage === null) return 
mentioned = mek.message.extendedTextMessage.contextInfo.mentionedJid
pru = '.\n'
for (let _ of mentioned) {
pru += `@${_.split('@')[0]}\n`
}
ban.push(`${mentioned}`)
fs.writeFileSync('./database/banned.json', JSON.stringify(ban))
susp = `üö´@${mentioned[0].split('@')[0]} ha sido prohibido y ya no podr√° usar comandos de botüö´`
mentions(`${susp}`, mentioned, true)   
break


case prefix+ 'unban':
if (!isGroup) return reply(mess.only.group)
if (!mek.key.fromMe) return fakestatus('„Äå ‚ùó „ÄçESTE COMANDO SOLO PUEDE SER USADO POR MI')
if (mek.message.extendedTextMessage === undefined || mek.message.extendedTextMessage === null) return 
mentioned = mek.message.extendedTextMessage.contextInfo.mentionedJid
pru = '.\n'
for (let _ of mentioned) {
pru += `@${_.split('@')[0]}\n`
}
ban.splice(`${mentioned}`)
fs.writeFileSync('./database/banned.json', JSON.stringify(ban))
susp = `‚ùé@${mentioned[0].split('@')[0]} se ha desbloqueado y puede volver a utilizar los comandos del bot‚ùé`
mentions(`${susp}`, mentioned, true)   
break*/
       
       
       
      
            case prefix+ 'leertodo':
            case prefix+ 'readall':
            if (!mek.key.fromMe) return fakestatus('Este comando solo puede ser usado por mi (‚óç‚Ä¢·¥ó‚Ä¢‚óç)')
            var chats = await SofiBot.chats.all()
            chats.map( async ({ jid }) => {
            await SofiBot.chatRead(jid)
            })
		    var teks = `Fueron Le√≠dos ${chats.length} Chats („Éªo„Éª)`
	        await SofiBot.sendMessage(from, teks, text, {quoted: mek})
		    console.log('Fueron Le√≠dos: ${chats.length} chats („Éªo„Éª)')
            break
            case prefix+ 'speed':
            case prefix+ 'velocidad':
	        case prefix+ 'ping':
			const timestamp = speed();
			const latensi = speed() - timestamp
			exec(`neofetch --stdout`, (error, stdout, stderr) => {
			const child = stdout.toString('utf-8')
			const teks = child.replace(/Memory:/, "Ram:")
			const pingnya = `*${teks}Velocidad: ${latensi.toFixed(4)} Milisegundos*`
			fakegroup(pingnya)
			})
			break  
            


case prefix+ 'ytmp3':
if (args.length === 0) return reply(`Ejemplo: *${prefix}ytmp3* _El link del video para descargar`)
       let isLinks = args[0].match(/(?:https?:\/{2})?(?:w{3}\.)?youtu(?:be)?\.(?:com|be)(?:\/watch\?v=|\/)([^\s&]+)/)
    if (!isLinks) return reply(mess.error.Iv)
     try {
          reply(mess.musica)
      yta(args[0])
   .then((res) => {
const { dl_link, thumb, title, filesizeF, filesize } = res
axios.get(`https://tinyurl.com/api-create.php?url=${dl_link}`)
.then((a) => {
if (Number(filesize) >= 30000) return sendMediaURL(from, thumb, `*Informaci√≥n („Éªo„Éª)*\n\n*Titulo*: ${title}\n*Ô∏èExtensi√≥n*:MP3\n*Tama√±o*:${filesizeF}\n*Link* : ${a.data}\n\n_Si la duraci√≥n de el audio es mayor al l√≠mite solo te enviar√© el enlace de descarga ‚äôÔπè‚äô_`)
const captions = `*Informaci√≥n*\n\n*Titulo*: ${title}\n*Ô∏èExtensi√≥n*:MP3\n*Tama√±o*:${filesizeF}\n\n_Espera, estoy enviando la m√∫sica (‚óç‚Ä¢·¥ó‚Ä¢‚óç)_`
sendMediaURL(from, thumb, captions)
sendMediaURL(from, dl_link).catch(() => reply(mess.error.api))
})
})
} catch (err) {
reply(mess.error.api)
}
break
case prefix+ 'ytmp4':
if (args.length === 0) return reply(`Enviar  comando *${prefix}ytmp4 [linkYt]*`)
let isLinks2 = args[0].match(/(?:https?:\/{2})?(?:w{3}\.)?youtu(?:be)?\.(?:com|be)(?:\/watch\?v=|\/)([^\s&]+)/)
if (!isLinks2) return reply(mess.error.Iv)
try {
reply(mess.mpv)
				ytv(args[0])
				.then((res) => {
				const { dl_link, thumb, title, filesizeF, filesize } = res
				axios.get(`https://tinyurl.com/api-create.php?url=${dl_link}`)
				.then((a) => {
				if (Number(filesize) >= 40000) return sendMediaURL(from, thumb, `*Informaci√≥n*\n\n*Titulo*: ${title}\n*Extensi√≥n*:MP3\n*FileTama√±o*:${filesizeF}\n*Link* : ${a.data}\n\n_Si la duraci√≥n de el video es mayor al l√≠mite solo te enviare el enlace de descarga ‚äôÔπè‚äô_`)
						const captionsYtmp4 = `*Informaci√≥n*\n\n*Titulo*: ${title}\n*Ô∏èExtensi√≥n*:MP4\n*Ô∏èTama√±o*:${filesizeF}\n\n_Espera, estoy enviando tu video (‚óç‚Ä¢·¥ó‚Ä¢‚óç)_`
				sendMediaURL(from, thumb, captionsYtmp4)
				sendMediaURL(from, dl_link).catch(() => reply(`Error`))
				})		
				})
				} catch (err) {
			    reply(`Error :c`)
				}
				break
	case prefix+ 'ytsearch':
			if (args.length < 1) return reply('Que quieres buscar? 7u7')
			var srch = args.join('');
			try {
        	var aramas = await yts(srch);
   			} catch {
        	return await SofiBot.sendMessage(from, 'Error (‚ï•Ôπè‚ï•)', MessageType.text, dload)
    		}
    		aramat = aramas.all 
    		var tbuff = await getBuffer(aramat[0].image)
    		var ytresult = '';
    		ytresult += '„Äå *BUSCADOR DE YT* „Äç'
		    		ytresult += '\n________________________\n\n'
		   			aramas.all.map((video) => {
		        	ytresult += '‚ùè T√≠tulo: ' + video.title + '\n'
		            ytresult += '‚ùè Link: ' + video.url + '\n'
		            ytresult += '‚ùè Duraci√≥n: ' + video.timestamp + '\n'
		            ytresult += '‚ùè Subida: ' + video.ago + '\n________________________\n\n'
		    		});
		    		ytresult += '‚ó© *Sofi-Bot*'
    		await fakethumb(tbuff,ytresult)
			break
case prefix+ 'play':
			if (args.length === 0) return reply(`Ejemplo: *${prefix}play* _El t√≠tulo de la musica para buscar_`)
			reply(mess.musica)
            var srch = args.join('')
    		aramas = await yts(srch);
    		aramat = aramas.all 
   			var mulaikah = aramat[0].url							
                  try {
                    yta(mulaikah)
                    .then((res) => {
                        const { dl_link, thumb, title, filesizeF, filesize } = res
                        axios.get(`https://tinyurl.com/api-create.php?url=${dl_link}`)
                        .then(async (a) => {
                        if (Number(filesize) >= 100000) return sendMediaURL(from, thumb, `*Informaci√≥n*\n\n*Titulo*: ${title}\n*Extensi√≥n*: MP3\n*Ô∏èTama√±o*: ${filesizeF}\n*Link* : ${a.data}\n\n_Si la duraci√≥n es mayor al l√≠mite no podr√© enviarte la m√∫sica :c_`)
		                        const captions = `*Informaci√≥n*\n\n*Titulo*: ${title}\n*Ô∏èExtensi√≥n*: MP3\n*Tama√±o*: ${filesizeF}\n*Link*: ${a.data}\n\n_Espera, estoy enviando tu musica (‚óç‚Ä¢·¥ó‚Ä¢‚óç)_`
                        sendMediaURL(from, thumb, captions)
                        await sendMediaURL(from, dl_link).catch(() => reply('error (‚ï•Ôπè‚ï•)'))
                        })                
                        })
                        } catch (err) {
                        reply(`Error (‚ï•Ôπè‚ï•)`)
                        }
                   break  
                   case prefix+ 'video':
            if (args.length === 0) return reply(`Ejemplo: *${prefix}video* _El t√≠tulo del video para buscar_`)
            var srch = args.join('')
            aramas = await yts(srch);
            aramat = aramas.all 
            var mulaikah = aramat[0].url                            
                  try {
                    ytv(mulaikah)
                    .then((res) => {
                        const { dl_link, thumb, title, filesizeF, filesize } = res
                        axios.get(`https://tinyurl.com/api-create.php?url=${dl_link}`)
                        .then(async (a) => {
                        if (Number(filesize) >= 100000) return sendMediaURL(from, thumb, `*PLAY VIDEO*\n\n*Titulo*: ${title}\n*Ô∏èExtensi√≥n*:MP3\n*FileTama√±o*:${filesizeF}\n*Link* : ${a.data}\n\n_Si la duraci√≥n de el v√≠deo es mayor al l√≠mite no podr√© envi√°rtelo (‚ï•Ôπè‚ï•)_`)
		                        const captions = `*PLAY VIDEO*\n\n*Titulo*: ${title}\n*Ô∏èExtensi√≥n*:MP4\n*Tama√±o*:${filesizeF}\n*Link* : ${a.data}\n\n_Espera, estoy enviando tu v√≠deo (‚óç‚Ä¢·¥ó‚Ä¢‚óç)_`
                        sendMediaURL(from, thumb, captions)
                        await sendMediaURL(from, dl_link).catch(() => reply('error (‚ï•Ôπè‚ï•)'))
                        })                
                        })
                        } catch (error) {
                        reply(`Error (‚ï•Ôπè‚ï•)`)
                        }
                   break
         //------FUNCIONES PARA EL USU√ÅRIO-------
                   case prefix+ 'wame':
                   SofiBot.updatePresence(from, Presence.composing) 
      options = {
          text: `„Äå *LINK WHATSAPP* „Äç\n\n_Solicitado por_ : *@${sender.split("@s.whatsapp.net")[0]}\n\nSu link de Whatsapp (‚óç‚Ä¢·¥ó‚Ä¢‚óç) : *https://wa.me/${sender.split("@s.whatsapp.net")[0]}*\n*O ( / )*\n*https://api.whatsapp.com/send?phone=${sender.split("@")[0]}*`,
          contextInfo: { mentionedJid: [sender] }
    }
    SofiBot.sendMessage(from, options, text, { quoted: mek } )
				break
case prefix+ 'creador':
case prefix+ 'confu':
await SofiBot.sendMessage(from, {displayname: "ConfuMods", vcard: vcard}, MessageType.contact)
reply('El es mi novio, digo mi creador (·óíc·óï)')
break

const sotoy = [
		'üçä : üçí : üçê',
		'üçí : üîî : üçä',
		'üçá : üçá : üçá',
		'üçä : üçã : üîî',
		'üîî : üçí : üçê',
		'üîî : üçí : üçä',
        'üçä : üçã : üîî',		
		'üçê : üçí : üçã',
		'üçê : üçê : üçê',
		'üçä : üçí : üçí',
		'üîî : üîî : üçá',
		'üçå : üçí : üîî',
		'üçê : üîî : üîî',
		'üçä : üçã : üçí',
		'üçã : üçã : üçå',
		'üîî : üîî : üçá',
		'üîî : üçê : üçá',
		'üîî : üîî : üîî',
		'üçí : üçí : üçí',
		'üçå : üçå : üçå',
		]
		                case prefix+ 'slot':
            const somtoy = sotoy[Math.floor(Math.random() * sotoy.length)]
            SofiBot.sendMessage(from, `[  üé∞ | SLOTS ]\n-----------------\nüçã : üçå : üçç\n${somtoy}<=====\nüçã : üçå : üçç\n[  üé∞ | SLOTS ]\n\nDescripci√≥n: si obtienes 3 de la misma fruta, significa que ganas\n\nEj : üçå : üçå : üçå<=====`, text, { quoted: freply })
            break
case prefix+ 'frases':
				SofiBot.updatePresence(from, Presence.composing) 
				     
				
				 
								const fra =['El amor inmaduro dice: "te amo porque te necesito". El amor maduro dice: "te necesito porque te amo" (Erich Fromm)','La vida empieza cada cinco minutos (Andreu Buenafuente)','Donde las palabras fallan la m√∫sica habla (Hans Christian Andersen)','Un buen viajante no tiene planes (Confucio)','Una vez aceptamos nuestros l√≠mites, vamos m√°s all√° de ello (Albert Einstein)','Lo que no nos mata nos hace m√°s fuertes (Friedrich Nietzsche)','Si caminas solo, ir√°s m√°s r√°pido. Si caminas acompa√±ado, llegar√°s m√°s lejos.','Una vida llena de errores no solo es m√°s honorable, sino que es m√°s sabia que una vida gastada sin hacer nada','Es sencillo hacer que las cosas sean complicadas, pero dif√≠cil hacer que sean sencillas. F. Nietzsche','No pierdas nunca el sentido del humor y aprende a re√≠rte de tus propios defectos','La preocupaci√≥n es como una mecedora, te mantiene ocupado pero no te lleva a ninguna parte',' El hombre que m√°s ha vivido no es aquel que m√°s a√±os ha cumplido, sino aquel que m√°s ha experimentado la vida','Si lo puedes so√±ar, lo puedes hacer','Lo imposible es el fantasma de los t√≠midos y el refugio de los cobardes','El camino que nos toca recorrer est√° lleno de sorpresas. Nunca vas a estar preparado para las que te toquen a ti, sean dichosas o sombr√≠as, pues eso es parte de adquirir experiencia. Y descubrir cu√°n gratas o desafortunadas son las que te esperan, es algo nunca podr√°s evadir','La felicidad no es algo que pospones para el futuro, es algo que dise√±as para el presente','El amigo ha de ser como el dinero, que antes de necesitarle, se sabe el valor que tiene','Tus acciones ser√°n el reflejo de la manera que tienes de ver la vida y las que te van definir ante los dem√°s. No las malgastes en cosas y actitudes que no valen la pena, solo t√∫ puedes decidir la forma en la que quieres que te recuerden, porque no estar√°s en este mundo para siempre','El amor es lo que mueve al mundo aunque a veces parezca lo contrario. A las personas no nos har√≠a mal recordar esto de vez en cuando','Nunca terminas de conocer a la gente. Tus amigos, tu familia y hasta t√∫ mismo, pueden ocultar sorpresas que en la vida te podr√≠as haber imaginado, tanto buenas como malas','Todos tenemos el mismo destino, en esencia no hay manera de diferenciarnos si nacemos para llorar y re√≠r. Recu√©rdalo, todos tenemos los d√≠as contados, vive cada uno de tus d√≠as como si fueran el regalo m√°s grande, porque nadie puede asegurarte el ma√±ana','Mientras vivas vas a encontrarte con todo tipo de personas, tanto buenas como malas. Es imposible adivinar las intenciones que oculta alguien detr√°s de su comportamiento, pero descubrirlo es la tarea m√°s interesante y peligrosa con la que te puedes llegar a topar','Los tiempos felices en la humanidad son las p√°ginas vac√≠as de la historia','La decepci√≥n despu√©s de un amor fallido, puede llegar a oprimir tu coraz√≥n hasta el punto de no dejarte respirar. Pero nadie se ha muerto de amor','No llores por la gente que se ha ido, enf√≥cate en quienes se encuentran a tu lado en el presente y qu√©date con los buenas recuerdos de los que se marcharon','No debes enfocarte en el dolor que puedes sentir si alguien te ha falla. Si no eres capaz de perdonar una equivocaci√≥n, enti√©rrala y sigue adelante','Amar es la aventura m√°s grande en la que te puedes embarcar. Porque te puede hacer volar m√°s alto de lo que jam√°s imaginarte y tambi√©n ponerte los pies de la tierra']
 					const jys = fra[Math.floor(Math.random() * fra.length)]
					  ses = fs.readFileSync(`./media/5.jpg`)
					SofiBot.sendMessage(from, ses, image, { caption: '*·ñ¥·èí·èó·èï·èã·èï ‡´Æ·è¨·èí·é•·éß·èï·èó·èïüëå*\n\n'+ jys, quoted: mek })
break                     
			    case prefix+ 'piropos':
				
								const mary =['Algunos quieren ser ricos a trav√©s del dinero, otros del poder, pero lo que no saben, es que la √∫nica riqueza es tu amor verdadero.','So√±ando contigo he tenido una revelaci√≥n, ahora necesito que me hagas un hueco en tu coraz√≥n.','Aunque por tu coraz√≥n han pasado muchas personas, me gustar√≠a que me hicieses un huequecito eterno, por peque√±o que sea, por si pasa algo, para que no me olvides jam√°s.','Lo que siento por ti es tan inmenso que, para guardarlo, me har√≠a falta otro universo.','me he convertido en un capit√°n pirata para asaltar tu coraz√≥n y robarle el amor.','Me preguntaste por qu√© te amaba y no pude responderte. Hoy entiendo que el amor verdadero es indescriptible, solo se puede sentir.','Ojal√° fuese papel para poder envolverte, bomb√≥n.','Ans√≠o besarte, abrazarte y no soltarte','A lo mejor mi hogar no es un palacio, pero me gustar√≠a que t√∫ fueses mi princesa.','Te amo demasiado, lo deseo todo contigo, por eso me vuelvo loc@, cuando t√∫ no est√°s conmigo.','¬øDe casualidad tienes un mapa contigo? Porque tengo el inter√©s de navegar por esa linda mirada','Desde que te he visto me he convertido un/a astronauta porque no he bajado de las galaxias','A pesar de que el cielo est√° lleno de estrellas, t√∫ eres la m√°s importante para mi','Si ser guapo fuera pcado, ya estar√≠as haciendo penitencia','Los que dicen que Disneyland es el lugar m√°s feliz del mundo no han estado junto a tiü•∫','Si ser guapo matara, ser√≠as la bomba at√≥micaüò≥','Si fuera gato, pasar√≠a mis nueve vidas contigo','¬øY si nos comemos unos tacos y yo te a-taco a besos?']
					const js = mary[Math.floor(Math.random() * mary.length)]
					  wew = fs.readFileSync(`./media/2.jpg`)
					SofiBot.sendMessage(from, wew, image, { caption: '*·éÆ·é•·èí·éß·éÆ·éß·èïüëå*\n\n'+ js, quoted: mek })
break  

case prefix+ 'charli':
case prefix+ 'charlie':
case prefix+ 'carlie':
case prefix+ 'carli':
const ch =['Si','No','No','Si']
    const cha = ch[Math.floor(Math.random() * ch.length)]
reply(`ùêÇùê°ùêöùê´ùê•ùê¢ùêû ùêÇùê°ùêöùê´ùê•ùê¢ùêû

ùêëùêûùê¨ùê©ùêÆùêûùê¨ùê≠ùêö : ${cha}`)
break

			case prefix+ 'juego':
           
			reply(`ùë∑ùë∞ùë¨ùë´ùëπùë® ùë∑ùë®ùë∑ùë¨ùë≥ ùë∂ ùëªùë∞ùë±ùë¨ùëπùë® :
			
ùë∑ùë®ùëπùë® ùë±ùëºùëÆùë®ùëπ ùëºùëªùë∞ùë≥ùë∞ùíÅùë® ùëºùëµùë∂ ùë´ùë¨ ùë¨ùë∫ùëªùë∂ùë∫ :
		    
ùë∑ùë∞ùë¨ùë´ùëπùë® : #‚úä
		   
ùë∑ùë®ùë∑ùë¨ùë≥ : #‚úã
		   
ùëªùë∞ùë±ùë¨ùëπùë® : #‚úåÔ∏è`)
		   break
		  
		   case prefix+ '‚úä':
            
const piedra =[`ùíÄùíê ùíÜùíçùíäùíãùíê : ‚úã\n\n :) ùëÆùíÇùíèùíÜ ùíâùíñùíéùíÇùíèùíê ùíÜùíîùíïùíñùíëùíäùíÖùíê`,`ùíÄùíê ùíÜùíçùíäùíãùíê : ‚úä\n\n :0 ùë¨ùíéùíëùíÇùíïùíÜ`,`ùíÄùíê ùíÜùíçùíäùíãùíê : ‚úåÔ∏è\n\n :( ùëÆùíÇùíèùíÇùíî ùíïùíñ`]
    const jg = piedra[Math.floor(Math.random() * piedra.length)]
    SofiBot.sendMessage(from, `ùë∑ùë∞ùë¨ùë´ùëπùë® ùë∑ùë®ùë∑ùë¨ùë≥ ùë∂ ùëªùë∞ùë±ùë¨ùëπùë®\n\n` + jg, text)
    break
    
    case prefix+ '‚úã':
           
const papel =[`ùíÄùíê ùíÜùíçùíäùíãùíê : ‚úã\n\n  :0 ùë¨ùíéùíëùíÇùíïùíÜ`,`ùíÄùíê ùíÜùíçùíäùíãùíê : ‚úä\n\n :( ùëÆùíÇùíèùíÇùíî ùíïùíñ`,`ùíÄùíê ùíÜùíçùíäùíãùíê : ‚úåÔ∏è\n\n :) ùëÆùíÇùíèùíÜ ùíâùíñùíéùíÇùíèùíê ùíÜùíîùíïùíñùíëùíäùíÖùíê`]
    const jggg = papel[Math.floor(Math.random() * papel.length)]
    SofiBot.sendMessage(from, `ùë∑ùë∞ùë¨ùë´ùëπùë® ùë∑ùë®ùë∑ùë¨ùë≥ ùë∂ ùëªùë∞ùë±ùë¨ùëπùë®\n\n` + jggg, text)
    break
    
    case prefix+ '‚úåÔ∏è':           
const tijera =[`ùíÄùíê ùíÜùíçùíäùíãùíê : ‚úã\n\n:( ùëÆùíÇùíèùíÇùíî ùíïùíñ`,`ùíÄùíê ùíÜùíçùíäùíãùíê : ‚úä\n\n :) ùëÆùíÇùíèùíÜ ùíâùíñùíéùíÇùíèùíê ùíÜùíîùíïùíñùíëùíäùíÖùíê`,`ùíÄùíê ùíÜùíçùíäùíãùíê : ‚úåÔ∏è\n\n:0 ùë¨ùíéùíëùíÇùíïùíÜ `]
    const jgg = tijera[Math.floor(Math.random() * tijera.length)]
    SofiBot.sendMessage(from, `ùë∑ùë∞ùë¨ùë´ùëπùë® ùë∑ùë®ùë∑ùë¨ùë≥ ùë∂ ùëªùë∞ùë±ùë¨ùëπùë®\n\n` + jgg, text)
    break



case prefix+ 'blood':             
const apis9 =['7c6c9a9e1138b473e6c64388','ff8508e71c332b870c1e8a1b','b57c69801b7b3e63b3b3e94c','e07d2ff8ff95d995809ec7b3','99ae3d189586081a2be37357','8cd8a7918eab2510afd496c0']
 const nepe9 = apis9[Math.floor(Math.random() * apis9.length)]
                bpp = `${body.slice(7)}`
                     if (args.length < 1) return reply('Donde esta el texto??')
                     if (args.length > 10) return reply('Maximo 10 letras')
                     reply (mess.wait)
                     buff = await getBuffer(`https://api.lolhuman.xyz/api/textprome/bloodfrosted?apikey=${nepe9}&text=${bpp}`, {method: 'get'})
                     SofiBot.sendMessage(from, buff, image, {quoted: mek})                  
                  break  
                  
case prefix+ 'blood2':
           const apis8 =['7c6c9a9e1138b473e6c64388','ff8508e71c332b870c1e8a1b','b57c69801b7b3e63b3b3e94c','e07d2ff8ff95d995809ec7b3','99ae3d189586081a2be37357','8cd8a7918eab2510afd496c0']
 const nepe8 = apis8[Math.floor(Math.random() * apis8.length)]     
                bpp1 = `${body.slice(8)}`
                     if (args.length < 1) return reply('Donde esta el texto??')
                     if (args.length > 10) return reply('Maximo 10 letras')
                     reply (mess.wait)
                     buff = await getBuffer(`https://api.lolhuman.xyz/api/textprome/horrorblood?apikey=${nepe8}&text=${bpp1}`, {method: 'get'})
                     SofiBot.sendMessage(from, buff, image, {quoted: mek})
                  
                  break 
                   
case prefix+ 'bokeh':
           const apis7 =['7c6c9a9e1138b473e6c64388','ff8508e71c332b870c1e8a1b','b57c69801b7b3e63b3b3e94c','e07d2ff8ff95d995809ec7b3','99ae3d189586081a2be37357','8cd8a7918eab2510afd496c0']
 const nepe7 = apis7[Math.floor(Math.random() * apis7.length)]     
                bpp2 = `${body.slice(7)}`
                     if (args.length < 1) return reply('Donde esta el texto??')
                     if (args.length > 10) return reply('Maximo 10 letras')
                     reply (mess.wait)
                     buff = await getBuffer(`https://api.lolhuman.xyz/api/textprome/bokeh?apikey=${nepe7}&text=${bpp2}`, {method: 'get'})
                     SofiBot.sendMessage(from, buff, image, {quoted: mek})
                  
                  break 
                   
case prefix+ 'toxic':
          const apis1 =['7c6c9a9e1138b473e6c64388','ff8508e71c332b870c1e8a1b','b57c69801b7b3e63b3b3e94c','e07d2ff8ff95d995809ec7b3','99ae3d189586081a2be37357','8cd8a7918eab2510afd496c0']
 const nepe1 = apis1[Math.floor(Math.random() * apis1.length)]    
                bpp3 = `${body.slice(7)}`
                     if (args.length < 1) return reply('Donde esta el texto??')
                     if (args.length > 10) return reply('Maximo 10 letras')
                     reply (mess.wait)
                     buff = await getBuffer(`https://api.lolhuman.xyz/api/textprome/toxic?apikey=${nepe1}&text=${bpp3}`, {method: 'get'})
                     SofiBot.sendMessage(from, buff, image, {quoted: mek})
                  
                  break 
                   
case prefix+ 'ice':
const apis =['7c6c9a9e1138b473e6c64388','ff8508e71c332b870c1e8a1b','b57c69801b7b3e63b3b3e94c','e07d2ff8ff95d995809ec7b3','99ae3d189586081a2be37357','8cd8a7918eab2510afd496c0']
 const nepe = apis[Math.floor(Math.random() * apis.length)]
                
                bpp5 = `${body.slice(5)}`
                     if (args.length < 1) return reply('Donde esta el texto??')
                     if (args.length > 10) return reply('Maximo 10 letras')
                     reply (mess.wait)
                     buff = await getBuffer(`https://api.lolhuman.xyz/api/textprome/icecold?apikey=${nepe}&text=${bpp5}`, {method: 'get'})
                     SofiBot.sendMessage(from, buff, image, {quoted: mek})
                  
                  break  
                  
case prefix+ 'box':
       const apis2 =['7c6c9a9e1138b473e6c64388','ff8508e71c332b870c1e8a1b','b57c69801b7b3e63b3b3e94c','e07d2ff8ff95d995809ec7b3','99ae3d189586081a2be37357','8cd8a7918eab2510afd496c0']
 const nepe2 = apis2[Math.floor(Math.random() * apis2.length)]        
                bpp4 = `${body.slice(5)}`
                     if (args.length < 1) return reply('Donde esta el texto??')
                     if (args.length > 10) return reply('Maximo 10 letras')
                     reply (mess.wait)
                     buff = await getBuffer(`https://api.lolhuman.xyz/api/textprome/box3d?apikey=${nepe2}&text=${bpp4}`, {method: 'get'})
                     SofiBot.sendMessage(from, buff, image, {quoted: mek})
                  
                  break 
                   
case prefix+ 'love':
    const apis3 =['7c6c9a9e1138b473e6c64388','ff8508e71c332b870c1e8a1b','b57c69801b7b3e63b3b3e94c','e07d2ff8ff95d995809ec7b3','99ae3d189586081a2be37357','8cd8a7918eab2510afd496c0']
 const nepe3 = apis3[Math.floor(Math.random() * apis3.length)]           
                bpp7 = `${body.slice(6)}`
                     if (args.length < 1) return reply('Donde esta el texto??')
                     if (args.length > 10) return reply('Maximo 10 letras')
                     reply (mess.wait)
                     buff = await getBuffer(`https://api.lolhuman.xyz/api/photooxy1/love?apikey=${nepe3}&text=${bpp7}`, {method: 'get'})
                     SofiBot.sendMessage(from, buff, image, {quoted: mek})
                  
                  break  
                  
case prefix+ 'luxury':
   const apis4 =['7c6c9a9e1138b473e6c64388','ff8508e71c332b870c1e8a1b','b57c69801b7b3e63b3b3e94c','e07d2ff8ff95d995809ec7b3','99ae3d189586081a2be37357','8cd8a7918eab2510afd496c0']
 const nepe4 = apis4[Math.floor(Math.random() * apis4.length)]           
                bpp6 = `${body.slice(8)}`
                     if (args.length < 1) return reply('Donde esta el texto??')
                     if (args.length > 10) return reply('Maximo 10 letras')
                     reply (mess.wait)
                     buff = await getBuffer(`https://api.lolhuman.xyz/api/textprome/luxury?apikey=${nepe4}&text=${bpp6}`, {method: 'get'})
                     SofiBot.sendMessage(from, buff, image, {quoted: mek})
                  
                  break 
                   
case prefix+ 'love2':
            const apis5 =['7c6c9a9e1138b473e6c64388','ff8508e71c332b870c1e8a1b','b57c69801b7b3e63b3b3e94c','e07d2ff8ff95d995809ec7b3','99ae3d189586081a2be37357','8cd8a7918eab2510afd496c0']
 const nepe5 = apis5[Math.floor(Math.random() * apis5.length)]    
                bpp8 = `${body.slice(7)}`
                     if (args.length < 1) return reply('Donde esta el texto??')
                     if (args.length > 10) return reply('Maximo 10 letras')
                     reply (mess.wait)
                     buff = await getBuffer(`https://api.lolhuman.xyz/api/photooxy1/lovemessage?apikey=${nepe5}&text=${bpp8}`, {method: 'get'})
                     SofiBot.sendMessage(from, buff, image, {quoted: mek})
                  
                  break  
                  
case prefix+ 'grose':
    const apis6 =['7c6c9a9e1138b473e6c64388','ff8508e71c332b870c1e8a1b','b57c69801b7b3e63b3b3e94c','e07d2ff8ff95d995809ec7b3','99ae3d189586081a2be37357','8cd8a7918eab2510afd496c0']
 const nepe6 = apis6[Math.floor(Math.random() * apis6.length)]            
                bpp9 = `${body.slice(7)}`
                     if (args.length < 1) return reply('Donde esta el texto??')
                     if (args.length > 10) return reply('Maximo 10 letras')
                     reply (mess.wait)
                     buff = await getBuffer(`https://api.lolhuman.xyz/api/photooxy1/golderrose?apikey=${nepe6}&text={bpp9}`, {method: 'get'})
                     SofiBot.sendMessage(from, buff, image, {quoted: mek})
                  
                  break  


case prefix+ 'waifu':

reply (mess.wait)
const uui =['1','2','3','4','5','6','7','8','9','10','11','12','13','14','15','16','17','18','19','20','21','22','23','24','25','26','27','28','29','30','31','32','33','34','35','36','37','38','39','40','41','42','43','44','45','46','47','48','49','50','51','52','53','54','55','56','57','58','59','60','61','62','63','64','65']
    const xfjs = uui[Math.floor(Math.random() * uui.length)]
uwu = fs.readFileSync(`./waifu/${xfjs}.jpg`);
SofiBot.sendMessage(from, uwu, image, {quote: mek})
break

case prefix+ 'loli':

reply (mess.wait)
const ui =['1','2','3','4','5','6','7','8','9','10','11','12','13','14','15','16','17','18','19','20','21','22','23','24','25','26','27','28','29','30','31','32','33','34','35','36','37','38','39','40','41','42','43','44','45','46','47','48','49','50','51','52','53','54','55','56','57','58','59','60','61','62','63','64','65','66','67','68','69']
    const xfjjs = ui[Math.floor(Math.random() * ui.length)]
uwu = fs.readFileSync(`./loli/${xfjjs}.jpg`);
SofiBot.sendMessage(from, uwu, image, {quote: mek})
break


case prefix+ 'muslos':
case prefix+ 'muslo':
reply (mess.wait)
const uiu =['1','2','3','4','5','6','7','8','9','10','11','12','13','14','15','16','17','18','19','20','21','22','23','24','25','26','27','28','29','30']
    const xfjjjjjs = uiu[Math.floor(Math.random() * uiu.length)]
uwu = fs.readFileSync(`./muslos/${xfjjjjjs}.jpg`);
SofiBot.sendMessage(from, uwu, image, {quote: mek})
break	
				
     default:
     
     
                         if (budy.includes('chat.whatsapp')){
					if (!isGroup) return
					if (!isAntiLink) return
					if (isGroupAdmins) return reply('Te salvaste eres admin (‚óç‚Ä¢·¥ó‚Ä¢‚óç)‚ù§')
										var kic = `${sender.split("@")[0]}@s.whatsapp.net`
					reply(`Enlace detectadoüò§ @${sender.split("@")[0]}`)
					SofiBot.groupRemove(from, [kic]).catch((e)=>{reply(`*ERR:* ${e}`)
					}, 0)
				    }

		if (isGroup && !isCmd && budy != undefined) {
						console.log(budy)
					} else {
						console.log(color('[ BOT ]','blue'), 'Comando No Registrado De', color(sender.split('@')[0]))
					}
					}
		} catch (e) {
			console.log('Error : %s', color(e, 'red'))
		}
	})
	}
starts() 
